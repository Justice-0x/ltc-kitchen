---
// Equipment data - this could be moved to a separate data file later
const equipment = [
  {
    id: 'perlick',
    name: 'Perlick',
    category: 'Beverage',
    icon: '🍺',
    description: 'Beer dispensing and cooling systems',
    status: 'operational',
    lastMaintenance: '2024-01-15',
    nextMaintenance: '2024-04-15',
    location: 'Bar Area',
    model: 'PSS-2',
    serial: 'PER-2023-001'
  },
  {
    id: 'turbochef',
    name: 'TurboChef',
    category: 'Cooking',
    icon: '🔥',
    description: 'High-speed convection oven',
    status: 'operational',
    lastMaintenance: '2024-01-20',
    nextMaintenance: '2024-05-20',
    location: 'Kitchen',
    model: 'TC-4',
    serial: 'TC-2023-002'
  },
  {
    id: 'frosty',
    name: 'Frosty',
    category: 'Cooling',
    icon: '🍦',
    description: 'Ice cream and frozen dessert machine',
    status: 'maintenance',
    lastMaintenance: '2024-01-10',
    nextMaintenance: '2024-02-10',
    location: 'Dessert Station',
    model: 'F-2000',
    serial: 'FRO-2023-003'
  },
  {
    id: 'hoshizaki',
    name: 'Hoshizaki',
    category: 'Cooling',
    icon: '🧊',
    description: 'Ice machine and refrigeration',
    status: 'operational',
    lastMaintenance: '2024-01-25',
    nextMaintenance: '2024-06-25',
    location: 'Bar Area',
    model: 'KM-500MAH',
    serial: 'HOS-2023-004'
  },
  {
    id: 'southbend',
    name: 'Southbend',
    category: 'Cooking',
    icon: '🍳',
    description: 'Commercial range and griddle',
    status: 'operational',
    lastMaintenance: '2024-01-18',
    nextMaintenance: '2024-04-18',
    location: 'Kitchen',
    model: 'SRG-36',
    serial: 'SB-2023-005'
  },
  {
    id: 'chicago-folders',
    name: 'Chicago Folders',
    category: 'Laundry',
    icon: '📄',
    description: 'Commercial folder for linens',
    status: 'operational',
    lastMaintenance: '2024-01-12',
    nextMaintenance: '2024-03-12',
    location: 'Laundry Room',
    model: 'CF-200',
    serial: 'CF-2023-006'
  },
  {
    id: 'ironers',
    name: 'Ironers',
    category: 'Laundry',
    icon: '🧺',
    description: 'Commercial ironing equipment',
    status: 'operational',
    lastMaintenance: '2024-01-08',
    nextMaintenance: '2024-03-08',
    location: 'Laundry Room',
    model: 'IR-150',
    serial: 'IR-2023-007'
  },
  {
    id: 'laundry',
    name: 'Laundry',
    category: 'Laundry',
    icon: '🌀',
    description: 'Commercial washers and dryers',
    status: 'operational',
    lastMaintenance: '2024-01-05',
    nextMaintenance: '2024-02-05',
    location: 'Laundry Room',
    model: 'LW-300',
    serial: 'LW-2023-008'
  },
  {
    id: 'bills-bitch',
    name: "Bill's Bitch",
    category: 'Specialty',
    icon: '✨',
    description: 'Custom equipment system',
    status: 'operational',
    lastMaintenance: '2024-01-30',
    nextMaintenance: '2024-07-30',
    location: 'Special Area',
    model: 'BB-100',
    serial: 'BB-2023-009'
  }
];

// Filter equipment by category
const categories = [...new Set(equipment.map(item => item.category))];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Equipment Directory - LTC Kitchen</title>
  </head>
  <body class="flex bg-gray-100">
    <!-- Sidebar -->
    <nav class="w-64 h-screen bg-white shadow-md p-4 flex flex-col">
      <h2 class="text-xl font-bold mb-6">📘 LTC Kitchen</h2>

      <a href="/" class="mb-2 block hover:text-blue-500">🏠 Dashboard</a>
      <a href="/equipment" class="mb-2 block text-blue-500 font-semibold">📋 Equipment Directory</a>
      <a href="/perlick" class="mb-2 block hover:text-blue-500">🍺 Perlick</a>
      <a href="/turbochef" class="mb-2 block hover:text-blue-500">🔥 TurboChef</a>
      <a href="/frosty" class="mb-2 block hover:text-blue-500">🍦 Frosty</a>
      <a href="/hoshizaki" class="mb-2 block hover:text-blue-500">🧊 Hoshizaki</a>
      <a href="/southbend" class="mb-2 block hover:text-blue-500">🍳 Southbend</a>
      <a href="/chicago-folders" class="mb-2 block hover:text-blue-500">📄 Chicago Folders</a>
      <a href="/ironers" class="mb-2 block hover:text-blue-500">🧺 Ironers</a>
      <a href="/laundry" class="mb-2 block hover:text-blue-500">🌀 Laundry</a>
      <a href="/bills-bitch" class="mb-2 block hover:text-blue-500">✨ Bill's Bitch</a>

      <hr class="my-4" />

      <h3 class="font-bold mb-2">🎨 Themes</h3>
      <button data-theme="light" class="theme-btn mb-2 w-full p-2 rounded bg-gray-200">☀️ Light</button>
      <button data-theme="dark" class="theme-btn mb-2 w-full p-2 rounded bg-gray-800 text-white">🌙 Dark</button>
      <button data-theme="spooky" class="theme-btn mb-2 w-full p-2 rounded bg-purple-700 text-white">🎃 Spooky</button>
    </nav>

    <!-- Main Content -->
    <main class="flex-1 p-6">
      <div class="mb-6">
        <h1 class="text-3xl font-bold mb-2">📋 Equipment Directory</h1>
        <p class="text-gray-600">Complete listing of all LTC Kitchen equipment</p>
      </div>

      <!-- Search and Filter Controls -->
      <div class="mb-6 flex flex-wrap gap-4">
        <div class="flex-1 min-w-64">
          <input 
            type="text" 
            id="searchInput" 
            placeholder="🔍 Search equipment..." 
            class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        <select id="categoryFilter" class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
          <option value="">All Categories</option>
          {categories.map(category => (
            <option value={category}>{category}</option>
          ))}
        </select>
        <select id="statusFilter" class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
          <option value="">All Status</option>
          <option value="operational">Operational</option>
          <option value="maintenance">Maintenance</option>
          <option value="out-of-service">Out of Service</option>
        </select>
      </div>

      <!-- Equipment Grid -->
      <div id="equipmentGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {equipment.map(item => (
          <div class="equipment-card bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow" data-category={item.category} data-status={item.status}>
            <div class="flex items-center mb-4">
              <span class="text-3xl mr-3">{item.icon}</span>
              <div>
                <h3 class="text-xl font-bold">{item.name}</h3>
                <span class="text-sm text-gray-500">{item.category}</span>
              </div>
            </div>
            
            <p class="text-gray-600 mb-4">{item.description}</p>
            
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="font-medium">Status:</span>
                <span class={`px-2 py-1 rounded text-xs ${
                  item.status === 'operational' ? 'bg-green-100 text-green-800' :
                  item.status === 'maintenance' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {item.status.charAt(0).toUpperCase() + item.status.slice(1)}
                </span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Location:</span>
                <span>{item.location}</span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Model:</span>
                <span>{item.model}</span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Serial:</span>
                <span class="font-mono text-xs">{item.serial}</span>
              </div>
              <div class="flex justify-between">
                <span class="font-medium">Next Maintenance:</span>
                <span>{item.nextMaintenance}</span>
              </div>
            </div>
            
            <div class="mt-4 pt-4 border-t">
              <a href={`/${item.id}`} class="text-blue-500 hover:text-blue-700 font-medium">
                View Details →
              </a>
            </div>
          </div>
        ))}
      </div>
    </main>

    <!-- Theme Management Script -->
    <script>
      // Theme management functionality
      function switchTheme(theme) {
        // Remove all theme classes first
        document.body.classList.remove('light', 'dark', 'spooky');
        // Add the new theme class
        document.body.classList.add(theme);
        localStorage.setItem('theme', theme);
        updateActiveThemeButton(theme);
      }

      function updateActiveThemeButton(activeTheme) {
        document.querySelectorAll('.theme-btn').forEach(btn => {
          btn.classList.remove('ring-2', 'ring-blue-500', 'bg-blue-200');
          if (btn.dataset.theme === activeTheme) {
            btn.classList.add('ring-2', 'ring-blue-500', 'bg-blue-200');
          }
        });
      }

      // Initialize theme immediately to prevent flash
      (function() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.body.classList.add(savedTheme);
        updateActiveThemeButton(savedTheme);
      })();

      // Theme button event listeners
      document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.theme-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            e.preventDefault();
            switchTheme(btn.dataset.theme);
          });
        });
      });
    </script>

    <!-- Search and Filter Functionality -->
    <script>
      const searchInput = document.getElementById('searchInput');
      const categoryFilter = document.getElementById('categoryFilter');
      const statusFilter = document.getElementById('statusFilter');
      const equipmentGrid = document.getElementById('equipmentGrid');
      const equipmentCards = document.querySelectorAll('.equipment-card');

      function filterEquipment() {
        const searchTerm = searchInput.value.toLowerCase();
        const selectedCategory = categoryFilter.value;
        const selectedStatus = statusFilter.value;

        equipmentCards.forEach(card => {
          const name = card.querySelector('h3').textContent.toLowerCase();
          const description = card.querySelector('p').textContent.toLowerCase();
          const category = card.dataset.category;
          const status = card.dataset.status;

          const matchesSearch = name.includes(searchTerm) || description.includes(searchTerm);
          const matchesCategory = !selectedCategory || category === selectedCategory;
          const matchesStatus = !selectedStatus || status === selectedStatus;

          if (matchesSearch && matchesCategory && matchesStatus) {
            card.style.display = 'block';
          } else {
            card.style.display = 'none';
          }
        });
      }

      searchInput.addEventListener('input', filterEquipment);
      categoryFilter.addEventListener('change', filterEquipment);
      statusFilter.addEventListener('change', filterEquipment);
    </script>
  </body>
</html>
