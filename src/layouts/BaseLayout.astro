---
import SimpleSidebar from "../components/SimpleSidebar.jsx";
import "../styles/global.css";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>üçπ Margaritaville Kitchen & Equipment</title>
    <meta name="description" content="Professional commercial kitchen equipment management portal" />
    <meta name="cache-bust" content="{new Date().getTime()}" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" href="/logo.png" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Creepster&display=swap" rel="stylesheet">
    <script>
      // Apply theme as early as possible; guard if body not ready
      (function() {
        try {
          const savedTheme = localStorage.getItem('theme') || 'dark';
          document.documentElement.setAttribute('data-theme', savedTheme);
          if (document.body) {
            document.body.classList.remove('light', 'dark', 'spooky');
            document.body.classList.add(savedTheme);
          } else {
            document.addEventListener('DOMContentLoaded', function() {
              document.body.classList.remove('light', 'dark', 'spooky');
              document.body.classList.add(savedTheme);
            });
          }
        } catch (e) {
          // no-op
        }
      })();
    </script>
  </head>
  <body class="bg-gray-900 min-h-screen">
    <!-- Watermark -->
    <div class="fixed inset-0 pointer-events-none z-0 opacity-5">
      <div class="absolute inset-0 flex items-center justify-center">
        <div class="text-6xl md:text-9xl font-bold text-slate-900 transform rotate-45 select-none">
          MARGARITAVILLE
        </div>
      </div>
    </div>

    <!-- Mobile Menu Overlay -->
    <div id="mobile-menu-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden lg:hidden" onclick="closeMobileMenu()"></div>

    <!-- Mobile Header -->
    <header class="lg:hidden bg-slate-900 border-b border-slate-700 px-4 py-3">
      <div class="flex justify-between items-center">
        <div class="flex items-center space-x-3">
          <button id="mobile-menu-btn" class="p-2 rounded-lg bg-slate-800 hover:bg-slate-700 transition-colors" title="Menu (m)">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
          <h1 class="text-lg font-bold text-white">üçπ Margaritaville Kitchen</h1>
        </div>
        <div class="flex items-center space-x-2">
          <!-- Theme Toggle for Mobile -->
          <button id="mobile-theme-btn" class="p-2 rounded-lg bg-slate-800 hover:bg-slate-700 transition-colors" title="Toggle Theme (t)">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
            </svg>
          </button>
          <button id="qr-scanner-btn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm font-medium transition-colors" title="QR Scanner (q)">
            üì± QR
          </button>
        </div>
      </div>
    </header>

    <!-- Main Layout Container -->
    <div class="flex min-h-screen">
      <!-- Simple Sidebar -->
      <div class="hidden lg:block flex-shrink-0">
        <SimpleSidebar client:load />
      </div>
      
      <!-- Mobile Sidebar -->
      <div id="mobile-sidebar" class="fixed inset-y-0 left-0 z-50 transform -translate-x-full transition-transform duration-300 ease-in-out lg:hidden w-64 bg-gradient-to-b from-teal-900 to-cyan-900 text-white shadow-2xl overflow-y-auto">
        <SimpleSidebar client:load />
      </div>

      <!-- Main Content -->
      <main class="flex-1 relative z-10 min-w-0 overflow-x-auto">
    <slot />
    <!-- Sticky mobile actions -->
    <client:load>
      {/* @ts-ignore React island */}
      {await import('../components/FloatingActions.jsx').then(m => m.default({}))}
    </client:load>
      </main>
    </div>

    <!-- QR Scanner Modal -->
    <div id="qr-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
      <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-xl font-bold text-slate-900">QR Code Scanner</h3>
          <button id="close-qr" class="text-slate-400 hover:text-slate-600 text-2xl font-bold">√ó</button>
        </div>
        <div id="qr-reader" class="mb-4"></div>
        <p class="text-sm text-slate-600 text-center">Scan QR code to access AI assistant</p>
      </div>
    </div>

    <!-- Footer -->
    <footer class="bg-gradient-to-r from-slate-900 to-slate-800 text-white py-4 relative z-10">
      <div class="max-w-7xl mx-auto px-6">
        <!-- Copyright & Credits -->
        <div class="flex flex-col md:flex-row justify-between items-center text-sm text-slate-400">
          <div class="flex items-center space-x-3">
            <img src="/favicon.svg" alt="Margaritaville Kitchen Logo" class="w-6 h-6 rounded shadow-sm" />
            <p>&copy; 2025 Margaritaville Kitchen & Equipment Portal. All rights reserved.</p>
          </div>
          <div class="mt-2 md:mt-0">
            <p class="flex items-center space-x-2">
              <span>Powered by</span>
              <a href="https://myguy.dev" target="_blank" class="text-blue-400 hover:text-blue-300 font-semibold transition-colors">
                myguy.dev
              </a>
              <span class="text-slate-500">|</span>
              <span class="italic">"Where technology meets the kitchen"</span>
            </p>
          </div>
        </div>
      </div>
    </footer>

    <!-- Theme & Shortcuts Script -->
    <script>
      // Theme management functionality
      function switchTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
        // Replace any existing theme class on body
        document.body.classList.remove('light', 'dark', 'spooky');
        document.body.classList.add(theme);
        localStorage.setItem('theme', theme);
        updateActiveThemeButton(theme);
      }

      // Make switchTheme globally available
      window.switchTheme = switchTheme;

      function updateActiveThemeButton(activeTheme) {
        document.querySelectorAll('.theme-btn').forEach(btn => {
          btn.classList.remove('ring-2', 'ring-blue-500', 'bg-blue-200');
          if (btn.dataset.theme === activeTheme) {
            btn.classList.add('ring-2', 'ring-blue-500', 'bg-blue-200');
          }
        });
      }

      // Initialize body class after DOM is ready and wire listeners
      document.addEventListener('DOMContentLoaded', function() {
        const savedTheme = localStorage.getItem('theme') || 'dark';
        document.body.classList.remove('light', 'dark', 'spooky');
        document.body.classList.add(savedTheme);
        updateActiveThemeButton(savedTheme);
        
        document.querySelectorAll('.theme-btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            e.preventDefault();
            switchTheme(btn.dataset.theme);
          });
        });

        // Mobile theme toggle
        const mobileThemeBtn = document.getElementById('mobile-theme-btn');
        if (mobileThemeBtn) {
          mobileThemeBtn.addEventListener('click', () => {
            const order = ['dark', 'light', 'spooky'];
            const currentTheme = localStorage.getItem('theme') || 'dark';
            const idx = order.indexOf(currentTheme);
            const nextTheme = order[(idx + 1) % order.length];
            
            console.log('Mobile theme toggle:', { currentTheme, nextTheme, idx });
            
            // Apply theme changes directly (same as sidebar)
            document.documentElement.setAttribute('data-theme', nextTheme);
            document.body.classList.remove('light', 'dark', 'spooky');
            document.body.classList.add(nextTheme);
            localStorage.setItem('theme', nextTheme);
            
            // Force a visual refresh
            document.body.style.display = 'none';
            document.body.offsetHeight; // Trigger reflow
            document.body.style.display = '';
            
            alert(`Mobile theme changed to: ${nextTheme}`);
            
            // Also call switchTheme for consistency
            switchTheme(nextTheme);

            // Update mobile button icon
            const icon = mobileThemeBtn.querySelector('svg path');
            if (icon) {
              if (nextTheme === 'dark') {
                // sun icon under dark mode (indicates switching to light next)
                icon.setAttribute('d', 'M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z');
              } else if (nextTheme === 'light') {
                // moon icon under light mode (indicates switching to spooky next)
                icon.setAttribute('d', 'M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z');
              } else {
                // spooky: show a star-like icon
                icon.setAttribute('d', 'M12 2l2.39 4.84L20 8l-4 3.9L17 18l-5-2.6L7 18l1-6.1L4 8l5.61-1.16L12 2z');
              }
            }
          });
        }

        // Parts ordering functionality
        initializePartsOrdering();
        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
          if (e.key === '/' && !e.metaKey && !e.ctrlKey && !e.altKey) {
            e.preventDefault();
            window.location.href = '/search';
          }
          if (e.key.toLowerCase() === 'm') {
            const btn = document.getElementById('mobile-menu-btn');
            if (btn) btn.click();
          }
          if (e.key.toLowerCase() === 't') {
            const btn = document.getElementById('mobile-theme-btn');
            if (btn) btn.click();
          }
          if (e.key.toLowerCase() === 'q') {
            const btn = document.getElementById('qr-scanner-btn');
            if (btn) btn.click();
          }
        });

        // Register service worker
        if ('serviceWorker' in navigator) {
          navigator.serviceWorker.register('/sw.js').catch(console.error);
        }
      });

      function initializePartsOrdering() {
        // Get all parts order components
        const partsOrders = document.querySelectorAll('.parts-order');
        
        partsOrders.forEach(order => {
          const sku = order.dataset.sku;
          const equipment = order.dataset.equipment;
          
          // Quote button
          const quoteBtn = order.querySelector(`#quote-btn-${sku}`);
          const quoteConfirm = order.querySelector(`#quote-confirm-${sku}`);
          
          if (quoteBtn) {
            quoteBtn.addEventListener('click', function(e) {
              e.preventDefault();
              const quantity = order.querySelector(`#quantity-${sku}`).value;
              
              // Create quote data
              const quoteData = {
                part: order.closest('.bg-white').querySelector('h3')?.textContent || 'Unknown Part',
                sku: sku,
                quantity: parseInt(quantity),
                equipment: equipment,
                timestamp: new Date().toISOString()
              };
              
              // Store in localStorage
              const existingQuotes = JSON.parse(localStorage.getItem('partsQuotes') || '[]');
              existingQuotes.push(quoteData);
              localStorage.setItem('partsQuotes', JSON.stringify(existingQuotes));
              
              // Show confirmation
              if (quoteConfirm) {
                quoteConfirm.classList.remove('hidden');
                quoteBtn.textContent = '‚úÖ Added to Quote';
                quoteBtn.classList.add('bg-green-600');
                
                // Hide confirmation after 3 seconds
                setTimeout(() => {
                  quoteConfirm.classList.add('hidden');
                }, 3000);
              }
            });
          }
          
          // Supplier buttons with improved search functionality
          const suppliers = [
            { class: 'partstown-btn', url: 'https://www.partstown.com/search?searchterm=' },
            { class: 'general-parts-btn', url: 'https://www.generalparts.com/search/?q=' },
            { class: 'partsfps-btn', url: 'https://www.partsfps.com/search?query=' },
            { class: 'emrco-btn', url: 'https://www.emrco.com/search?q=' }
          ];
          
          suppliers.forEach(supplier => {
            const btn = order.querySelector(`.${supplier.class}`);
            if (btn) {
              btn.addEventListener('click', function(e) {
                e.preventDefault();
                // Get the part name from the closest part card for better search
                const partCard = order.closest('.bg-white');
                const partName = partCard ? partCard.querySelector('h3')?.textContent?.trim() : '';
                const searchTerm = partName || sku;
                
                // Add visual feedback
                btn.style.transform = 'scale(0.95)';
                btn.style.opacity = '0.7';
                setTimeout(() => {
                  btn.style.transform = 'scale(1)';
                  btn.style.opacity = '1';
                }, 150);
                
                // Open supplier website with search term
                window.open(supplier.url + encodeURIComponent(searchTerm), '_blank');
              });
            }
          });

          // Spec sheet button
          const specBtn = order.querySelector('.spec-sheet-btn');
          if (specBtn) {
            specBtn.addEventListener('click', function(e) {
              e.preventDefault();
              const modal = document.getElementById(`spec-modal-${sku}`);
              if (modal) {
                modal.classList.remove('hidden');
              }
            });
          }
        });
      }
    </script>

    <!-- QR Scanner Library -->
    <script src="https://unpkg.com/qr-scanner@1.4.2/qr-scanner.umd.min.js"></script>
    
    <!-- QR Scanner Functionality -->
    <script>
      // QR Scanner functionality
      let qrScanner = null;
      
      function initQRScanner() {
        const qrModal = document.getElementById('qr-modal');
        const qrReader = document.getElementById('qr-reader');
        const qrBtn = document.getElementById('qr-scanner-btn');
        const closeBtn = document.getElementById('close-qr');
        
        if (!qrBtn) return;
        
        qrBtn.addEventListener('click', async function() {
          qrModal.classList.remove('hidden');
          
          try {
            // Create video element for camera
            const videoElement = document.createElement('video');
            videoElement.style.width = '100%';
            videoElement.style.maxWidth = '400px';
            videoElement.style.borderRadius = '8px';
            qrReader.innerHTML = '';
            qrReader.appendChild(videoElement);
            
            // Initialize QR Scanner
            qrScanner = new QrScanner(videoElement, result => {
              console.log('QR Code detected:', result);
              
              // Handle QR code result - redirect to AI assistant
              if (result.data.includes('ltc-kitchen') || result.data.includes('ai-assistant')) {
                window.open('https://chat.openai.com', '_blank');
                alert('ü§ñ Opening AI Assistant for LTC Kitchen support!');
              } else {
                alert(`üì± QR Code detected: ${result.data}`);
              }
              
              // Close modal
              closeQRModal();
            }, {
              highlightScanRegion: true,
              highlightCodeOutline: true,
            });
            
            await qrScanner.start();
            
          } catch (error) {
            console.error('QR Scanner error:', error);
            qrReader.innerHTML = `
              <div class="text-center p-8">
                <div class="text-6xl mb-4">üì±</div>
                <p class="text-red-600 mb-2 font-semibold">Camera access required</p>
                <p class="text-sm text-slate-600">Please allow camera access to scan QR codes for AI assistant</p>
              </div>
            `;
          }
        });
        
        closeBtn.addEventListener('click', closeQRModal);
        
        function closeQRModal() {
          qrModal.classList.add('hidden');
          if (qrScanner) {
            qrScanner.stop();
            qrScanner = null;
          }
          qrReader.innerHTML = '';
        }
        
        // Close modal when clicking outside
        qrModal.addEventListener('click', function(e) {
          if (e.target === qrModal) {
            closeQRModal();
          }
        });
      }

      // Initialize QR Scanner when DOM is ready
      document.addEventListener('DOMContentLoaded', function() {
        setTimeout(initQRScanner, 100);
        initMobileMenu();
      });

      // Mobile Menu Functionality
      function initMobileMenu() {
        const mobileMenuBtn = document.getElementById('mobile-menu-btn');
        const mobileSidebar = document.getElementById('mobile-sidebar');
        const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');

        if (mobileMenuBtn && mobileSidebar && mobileMenuOverlay) {
          // Open mobile menu
          mobileMenuBtn.addEventListener('click', function() {
            mobileSidebar.classList.remove('-translate-x-full');
            mobileMenuOverlay.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
          });

          // Close mobile menu
          window.closeMobileMenu = function() {
            mobileSidebar.classList.add('-translate-x-full');
            mobileMenuOverlay.classList.add('hidden');
            document.body.style.overflow = '';
          }

          // Close when pressing escape key
          document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && !mobileMenuOverlay.classList.contains('hidden')) {
              window.closeMobileMenu();
            }
          });

          // Close mobile menu when clicking a link (for better UX)
          mobileSidebar.addEventListener('click', function(e) {
            if (e.target.tagName === 'A') {
              setTimeout(window.closeMobileMenu, 150);
            }
          });
        }
      }
    </script>
  </body>
</html>
